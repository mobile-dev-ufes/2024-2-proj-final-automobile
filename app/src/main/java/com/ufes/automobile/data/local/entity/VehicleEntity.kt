package com.ufes.automobile.data.local.entity

import androidx.room.Entity
import androidx.room.PrimaryKey
import com.ufes.automobile.domain.model.Vehicle

/**
 * Represents a vehicle entity stored in the database.
 *
 * This data class defines the structure of a vehicle record within the Room database.
 * It includes various attributes describing the vehicle, such as its brand, model,
 * manufacturing year, and whether it's electric.
 *
 * @property id The unique identifier for the vehicle. This is automatically generated by the database.
 * @property brand The brand of the vehicle (e.g., "Toyota", "Tesla").
 * @property model The model of the vehicle (e.g., "Camry", "Model 3").
 * @property manufacturingYear The year the vehicle was manufactured.
 * @property purchaseDate The timestamp (in milliseconds since epoch) when the vehicle was purchased.
 * @property isElectric `true` if the vehicle is electric, `false` otherwise.
 * @property batteryCapacity The battery capacity of the vehicle (in kWh), if it's electric. `null` if not electric.
 * @property autonomy The estimated driving range (in km) of the vehicle, if applicable. `null` if not applicable (e.g., non-electric vehicle).
 * @property tankCapacity The fuel tank capacity (in liters) of the vehicle, if applicable. `null` if not applicable (e.g., electric vehicle).
 */
@Entity(tableName = "vehicles")
data class VehicleEntity(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val brand: String,
    val model: String,
    val manufacturingYear: Int,
    val purchaseDate: Long,
    val isElectric: Boolean,
    val batteryCapacity: Float?,
    val autonomy: Float?,
    val tankCapacity: Float?
)

fun VehicleEntity.toDomainModel(): Vehicle {
    return Vehicle(
        id = id,
        brand = brand,
        model = model,
        manufacturingYear = manufacturingYear,
        purchaseDate = purchaseDate,
        isElectric = isElectric,
        batteryCapacity = batteryCapacity,
        autonomy = autonomy,
        tankCapacity = tankCapacity
    )
}

fun Vehicle.toEntity(): VehicleEntity {
    return VehicleEntity(
        id = id,
        brand = brand,
        model = model,
        manufacturingYear = manufacturingYear,
        purchaseDate = purchaseDate,
        isElectric = isElectric,
        batteryCapacity = batteryCapacity,
        autonomy = autonomy,
        tankCapacity = tankCapacity
    )
}